openapi: 3.0.0
servers: []
info:
  version: API_VERSION
  title: API_NAME
  description: API_DESCRIPTION
paths:
  /:
    get:
      summary: Get API info
      description: >
        This endpoint returns general API info, such as the version number,
        description, and relevant links.
      responses:
        '200':
          description: Returns API info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIInfo'
  /schema:
    get:
      summary: Get API definition schema
      description: >
        This endpoint returns the API definition schema. By default, the
        response is in OpenAPI v3.0 JSON format, but you can specify your
        desired format via the `Accept` header or an `accept` query parameter.
      parameters:
        - name: Accept
          in: header
          description: >
            You can request a specific OpenAPI version and format. The default
            is `application/openapi+json;version=3.0`, which returns a OpenAPI
            v3.0 definition, in JSON format.  You can request either OpenAPI
            v2.0 (fka Swagger) or v3.0, in either JSON or YAML format. For
            example, to request OpenAPI v2.0 in YAML format, you would set the
            `Accept` header to `application/openapi+yaml;version=2.0`.
          schema:
            type: string
        - name: accept
          in: query
          description: >
            You can override the `Accept` header using the `accept` query
            parameter. This parameter takes the same format as the `Accept`
            header. For example, to request OpenAPI v2.0 in YAML format, the
            querystring would be `?accept=application/openapi+yaml;version=2.0`.
          schema:
            type: string
      responses:
        '200':
          description: Returns the API schema in the requested format
          content:
            application/openapi+json;version=3.0:
              schema:
                type: string
            application/openapi+yaml;version=3.0:
              schema:
                type: string
            application/openapi+json;version=2.0:
              schema:
                type: string
            application/openapi+yaml;version=2.0:
              schema:
                type: string
  /characters:
    get:
      summary: Find characters
      description: >
        This endpoint returns all characters by default, or you can filter by
        `name` and `type` via query parameters.
      parameters:
        - name: name
          in: query
          description: >
            Filters the results by character name. This is a wildcard search, so
            `?name=man` will reeturn "Superman", "Batman", and "Wonder Woman".
          schema:
            type: string
        - name: type
          in: query
          description: >
            Filters the results by character type (i.e. "hero", "sidekick", or
            "villain").
          schema:
            type: string
            enum:
              $ref: '#/components/schemas/CharacterType/enum'
      responses:
        '200':
          description: >
            Returns all characters that matched the filter criteria. If there
            are no matching characters, then the response is an empty array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCharacters'
        '400':
          description: >
            Something is wrong with the request. For example, the `type` query
            parameter is not a valid character type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new character
      description: >
        This endpoint creates a new character. For heroes, you can also create
        the sidekick and/or nemesis at the same time by setting the `sidekick`
        and/or `nemesis` properties to objects rather than strings.
      responses:
        '201':
          description: The character was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: 'Something is wrong with the request, such as invalid character data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: >-
            There is already an existing character with the same (or very
            similar) name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterHierarchy'
        required: true
    delete:
      summary: Deletes all characters
      description: >
        This endpoint deletes **all** characters.  It's mostly just used during
        testing, to reset state between each test.
      responses:
        '200':
          description: All charactes were deleted
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - message
                additionalProperties: false
                properties:
                  count:
                    type: integer
                    minimum: 0
                  message:
                    $ref: '#/components/schemas/NonEmptyString'
  '/characters/{slug}':
    get:
      summary: Get a specific character
      description: >
        This endpoint returns a specific character, given its slug. The slug is
        the character's name, lowercased, with all non-alphanumeric characters
        removed. For example, the slug for "Wonder Woman" would be
        "wonderwoman".
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
            pattern:
              $ref: '#/components/schemas/CharacterSlug/pattern'
      responses:
        '200':
          description: Returns the requested character
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: 'Something is wrong with the request, such as invalid character slug.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: There is no character with the specified slug.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    APIInfo:
      type: object
      required:
        - name
        - version
        - description
        - links
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/NonEmptyString'
        version:
          $ref: '#/components/schemas/NonEmptyString'
        description:
          $ref: '#/components/schemas/NonEmptyString'
        links:
          type: object
          required:
            - characters
            - www
            - schema
            - docs
          additionalProperties: false
          properties:
            characters:
              $ref: '#/components/schemas/URL'
            www:
              $ref: '#/components/schemas/URL'
            schema:
              $ref: '#/components/schemas/URL'
            docs:
              $ref: '#/components/schemas/URL'
    CharacterHierarchy:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/NonEmptyString'
        type:
          $ref: '#/components/schemas/CharacterType'
        powers:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/NonEmptyString'
        weakness:
          type: string
          minLength: 0
        bio:
          type: string
          minLength: 0
        sidekick:
          type: object
        nemesis:
          type: object
    Character:
      type: object
      required:
        - name
        - type
        - powers
        - weakness
        - bio
        - links
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/NonEmptyString'
        type:
          $ref: '#/components/schemas/CharacterType'
        powers:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/NonEmptyString'
        weakness:
          type: string
          minLength: 0
        bio:
          type: string
          minLength: 0
        links:
          type: object
          required:
            - self
          additionalProperties: false
          properties:
            self:
              $ref: '#/components/schemas/URL'
            sidekick:
              $ref: '#/components/schemas/URL'
            nemesis:
              $ref: '#/components/schemas/URL'
    ArrayOfCharacters:
      type: array
      items:
        $ref: '#/components/schemas/Character'
    CharacterType:
      type: string
      enum:
        - hero
        - sidekick
        - villain
    CharacterSlug:
      type: string
      minLength: 1
      pattern: '^[a-z0-9]+$'
    NonEmptyString:
      type: string
      minLength: 1
    URL:
      type: string
      minLength: 1
      pattern: '^https?://'
    Error:
      type: object
      required:
        - error
        - message
      additionalProperties: false
      properties:
        error:
          $ref: '#/components/schemas/NonEmptyString'
        message:
          $ref: '#/components/schemas/NonEmptyString'

